import { VerticalBox, HorizontalBox, ComboBox } from "std-widgets.slint";
import { ToolBar, ToolButton } from "ToolBar.slint";
import { Show, Status, ShowType } from "Structs.slint";
import { Images, Palette } from "Global.slint";
import { ScoreWidget } from "ScoreWidget.slint";
import { LineEdit } from "LineEdit.slint";
import { TextEdit } from "TextEdit.slint";
import { SpinBox } from "SpinBox.slint";
import { RadioButtonsGroup } from "RadioButtonsGroup.slint";
import { DateTimeWidget } from "DateTimeWidget.slint";

export component AddShowWindow inherits Rectangle {
    callback add-show(Show);
    callback cancel-show();
    callback change-picture();
    callback link-changed(string) -> bool;
    callback import-clicked(string) -> Show;
    callback load-image(string) -> image;
    callback get-weekday(string) -> int;
    callback parse-datetime(string) -> [int];
    property <Show> show;
    property <Status> status: Status.watch-later;
    in-out property show-image <=> show-image-container.source;
    in-out property <string> link-to-picture;
    property <[int]> scheldule: [0, 0, 0, 0, 0, 0, 0];
    property <[string]> days: [@tr("Mon"), @tr("Tues"), @tr("Wed"), @tr("Thurs"), @tr("Fri"), @tr("Sat"), @tr("Sun")];

    public function reset() {
        title.text = "";
        alternative-title.text = "";
        release-date.text = "";
        about-show.text = "";
        link-to-view.text = "";
        link-to-picture = "";
        root.show-image = Images.show-picture;
        score-widget.score = 0;
        watch-later-button.checked = true;
        watching-button.checked = false;
        completed-button.checked = false;
        favorite-button.checked = false;
        dropped-button.checked = false;
        show-type.index = 0;
        season.text = "";
        episodes-count.text = "";
        scheldule = [0, 0, 0, 0, 0, 0, 0];
    }

    property <[int]> parsed-datetime;
    public function set-show(s: Show) {
        show = s;
        status = s.status;

        title.text = s.title;
        alternative-title.text = s.alternative-title;
        release-date.text = s.release-date;
        about-show.text = s.about;
        link-to-view.text = s.link-to-show;
        link-to-picture = s.link-to-picture;
        score-widget.score = s.score;

        if (s.show-type == ShowType.serial) {
            show-type.index = 0;
        }
        else if (s.show-type == ShowType.film) {
            show-type.index = 1;
        }
        else if (s.show-type == ShowType.cartoon) {
            show-type.index = 2;
        }
        else if (s.show-type == ShowType.anime) {
            show-type.index = 3;
        }

        season.text = s.season;
        episodes-count.text = s.episodes-count;

        parsed-datetime = parse-datetime(s.release-time);
        if (parsed-datetime[0] == 1970) {
            release-time.set-datetime(2024, parsed-datetime[1], parsed-datetime[2],
                parsed-datetime[3], parsed-datetime[4]);
        }
        else {
            release-time.set-datetime(parsed-datetime[0], parsed-datetime[1], parsed-datetime[2],
                parsed-datetime[3], parsed-datetime[4]);
        }

        scheldule[0] = s.schedule-monday;
        scheldule[1] = s.schedule-tuesday;
        scheldule[2] = s.schedule-wednesday;
        scheldule[3] = s.schedule-thursday;
        scheldule[4] = s.schedule-friday;
        scheldule[5] = s.schedule-saturday;
        scheldule[6] = s.schedule-sunday;

        watch-later-button.checked = false;
        watching-button.checked = false;
        completed-button.checked = false;
        favorite-button.checked = false;
        dropped-button.checked = false;

        if (s.status == Status.watch-later) {
            watch-later-button.checked = true;
        }
        else if (s.status == Status.watching) {
            watching-button.checked = true;
            watch-later-button.checked = false;
        }
        else if (s.status == Status.completed) {
            completed-button.checked = true;
            watch-later-button.checked = false;
        }
        else if (s.status == Status.dropped) {
            dropped-button.checked = true;
            watch-later-button.checked = false;
        }

        favorite-button.checked = s.favorite;

        if (s.picture.width > 0) {
            root.show-image = s.picture;
        }
        else {
            root.show-image = Images.show-picture;
        }
    }

    VerticalBox {
        padding: 0px;
        spacing: 0px;

        ToolBar {
            height: 50px;
            background: Palette.primary;

            add-button := ToolButton {
                hint: @tr("Add");
                icon: @image-url("assets/check.png");
                width: 50px;
                height: 50px;
                background-color: Palette.primary;
                visible: title.text != "";

                clicked => {
                    show.title = title.text;
                    show.alternative-title = alternative-title.text;
                    show.release-date = release-date.text;
                    show.about = about-show.text;
                    show.link-to-show = link-to-view.text;
                    show.score = score-widget.score;
                    show.favorite = favorite-button.checked;
                    show.status = status;
                    show.link-to-picture = root.link-to-picture;
                    show.picture = show-image;

                    if (show-type.index == 0) {
                        show.show-type = ShowType.serial;
                    }
                    else if (show-type.index == 1) {
                        show.show-type = ShowType.film;
                    }
                    else if (show-type.index == 2) {
                        show.show-type = ShowType.cartoon;
                    }
                    else if (show-type.index == 3) {
                        show.show-type = ShowType.anime;
                    }

                    if (season.text.is-float()) {
                        show.season = season.text.to-float();
                    }

                    if (episodes-count.text.is-float()) {
                        show.episodes-count = episodes-count.text.to-float();
                    }

                    show.release-time = release-time.text;
                    show.schedule-monday = scheldule[0];
                    show.schedule-tuesday = scheldule[1];
                    show.schedule-wednesday = scheldule[2];
                    show.schedule-thursday = scheldule[3];
                    show.schedule-friday = scheldule[4];
                    show.schedule-saturday = scheldule[5];
                    show.schedule-sunday = scheldule[6];

                    add-show(show);
                }
            }

            cancel-button := ToolButton {
                hint: @tr("Cancel");
                hint-direction-left: true;
                icon: @image-url("assets/close.png");
                width: 50px;
                height: 50px;
                background-color: Palette.primary;

                clicked => {
                    cancel-show();
                }
            }
        }

        HorizontalBox {
            padding: 25px;
            spacing: 25px;

            VerticalBox {
                z: 1;
                padding: 0px;
                spacing: 10px;
                alignment: start;

                show-image-container := Image {
                    width: 200px;
                    min-height: 50px;
                    source: Images.show-picture;

                    TouchArea {
                        mouse-cursor: pointer;

                        clicked => {
                            change-picture();
                        }
                    }
                }

                score-widget := ScoreWidget {}

                HorizontalBox {
                    alignment: space-between;
                    padding: 0px;
                    spacing: 0px;

                    watch-later-button := ToolButton {
                        background-color: Palette.primary;
                        checked-color: Palette.yellow;
                        checkable: true;
                        checked: true;
                        width: 36px;
                        height: 32px;
                        icon: @image-url("assets/clock.png");
                        hint: @tr("Plan to watch");
                        z: 100;

                        clicked => {
                            if (!self.checked) {
                                watching-button.checked = false;
                                completed-button.checked = false;
                                dropped-button.checked = false;
                                status = Status.watch-later;
                            }
                            else {
                                self.checked = false;
                            }
                        }
                    }
                    watching-button := ToolButton {
                        background-color: Palette.primary;
                        checked-color: Palette.green;
                        checkable: true;
                        checked: false;
                        width: 36px;
                        height: 32px;
                        icon: @image-url("assets/view.png");
                        hint: @tr("Watching");
                        z: 99;

                        clicked => {
                            if (!self.checked) {
                                watch-later-button.checked = false;
                                completed-button.checked = false;
                                dropped-button.checked = false;
                                status = Status.watching;
                            }
                            else {
                                self.checked = false;
                            }
                        }
                    }
                    completed-button := ToolButton {
                        background-color: Palette.primary;
                        checked-color: Palette.blue;
                        checkable: true;
                        checked: false;
                        width: 36px;
                        height: 32px;
                        icon: @image-url("assets/check-mark.png");
                        hint: @tr("Completed");
                        z: 98;

                        clicked => {
                            if (!self.checked) {
                                watch-later-button.checked = false;
                                watching-button.checked = false;
                                dropped-button.checked = false;
                                status = Status.completed;
                            }
                            else {
                                self.checked = false;
                            }
                        }
                    }
                    favorite-button := ToolButton {
                        background-color: Palette.primary;
                        checked-color: #a240ab;
                        checkable: true;
                        checked: false;
                        width: 36px;
                        height: 32px;
                        icon: @image-url("assets/love.png");
                        hint: @tr("Favorite");
                        z: 97;

                        clicked => {
                            if (dropped-button.checked) {
                                completed-button.checked = true;
                            }
                            if (!self.checked) {
                                dropped-button.checked = false;
                            }
                        }
                    }
                    dropped-button := ToolButton {
                        background-color: Palette.primary;
                        checked-color: #942e2e;
                        checkable: true;
                        checked: false;
                        width: 36px;
                        height: 32px;
                        icon: @image-url("assets/dislike.png");
                        hint: @tr("Dropped");
                        z: 96;

                        clicked => {
                            if (!self.checked) {
                                watch-later-button.checked = false;
                                watching-button.checked = false;
                                completed-button.checked = false;
                                favorite-button.checked = false;
                                status = Status.dropped;
                            }
                            else {
                                self.checked = false;
                            }
                        }
                    }
                }
            }

            VerticalBox {
                z: 0;
                padding: 0px;
                spacing: 5px;
                alignment: stretch;

                link-to-view := LineEdit {
                    placeholder-text: @tr("Link for watching (https://)");

                    edited => {
                        import-button.visible = root.link-changed(self.text);
                    }

                    import-button := ToolButton {
                        visible: false;
                        icon: Images.import;
                        x: parent.width - self.width;
                        width: 36px;
                        height: 30px;
                        background-color: Palette.primary;
                        border-color: parent.border-color;
                        border-width: parent.border-width;

                        clicked => {
                            root.show = import-clicked(link-to-view.text);
                            title.text = root.show.title;
                            alternative-title.text = root.show.alternative-title;
                            release-date.text = root.show.release-date;
                            about-show.text = root.show.about;
                            root.show-image = load-image(root.show.link-to-picture);
                            score-widget.score = root.show.score;

                            if (root.show.status == Status.watch-later) {
                                watch-later-button.checked = true;
                            }
                            else if (root.show.status == Status.watching) {
                                watching-button.checked = true;
                            }
                            else if (root.show.status == Status.completed) {
                                completed-button.checked = true;
                            }
                            else if (root.show.status == Status.dropped) {
                                dropped-button.checked = true;
                            }

                            favorite-button.checked = root.show.favorite;
                        }
                    }
                }

                show-type := RadioButtonsGroup {
                    list: [@tr("Serial"), @tr("Film"), @tr("Cartoon"), @tr("Anime")];
                    orientation: horizontal;
                    height: 20px;
                }

                title := LineEdit {
                    placeholder-text: @tr("Title");
                }

                alternative-title := LineEdit {
                    placeholder-text: @tr("Alternative title");
                }

                release-date := LineEdit {
                    placeholder-text: @tr("Release date");
                }

                HorizontalBox {
                    padding: 0px;
                    spacing: 5px;

                    season := LineEdit {
                        placeholder-text: @tr("Season");
                        input-type: number;
                    }

                    episodes-count := LineEdit {
                        placeholder-text: @tr("Episodes count");
                        input-type: number;
                    }
                }

                about-show := TextEdit {
                    placeholder-text: @tr("About");
                }

                VerticalBox {
                    padding: 0px;
                    spacing: 5px;

                    Text {
                        text: @tr("Schedule");
                        height: 14px;
                    }

                    HorizontalLayout {
                        alignment: start;

                        Text {
                            text: @tr("Release time:");
                            vertical-stretch: 0;
                        }

                        release-time := DateTimeWidget {
                            height: 75px;
                            vertical-stretch: 0;
                            property <int> weekday;

                            changed => {
                                release-date.text = release-time.text;
                                weekday = get-weekday(release-time.text);
                                scheldule[0] = 0;
                                scheldule[1] = 0;
                                scheldule[2] = 0;
                                scheldule[3] = 0;
                                scheldule[4] = 0;
                                scheldule[5] = 0;
                                scheldule[6] = 0;
                                scheldule[weekday] = 1;
                            }
                        }
                    }

                    HorizontalLayout {
                        for day[i] in scheldule: SpinBox {
                            hint: days[i] + " ";
                            height: 30px;
                            background-color: self.value > 0 ? Palette.blue : Palette.primary;
                            value: scheldule[i];

                            changed(value) => {
                                scheldule[i] = value;
                            }
                        }
                    }
                }
            }
        }
    }
}

