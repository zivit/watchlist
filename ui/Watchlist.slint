import { VerticalBox, HorizontalBox } from "std-widgets.slint";
import { ToolBar, ToolButton } from "ToolBar.slint";
import { Show, Status } from "Structs.slint";
import { Images, Palette } from "Global.slint";
import { TextEdit } from "TextEdit.slint";
import { LineEdit } from "LineEdit.slint";
import { ListElement, ListElementCompact } from "ListElement.slint";

export component Watchlist inherits Rectangle {
    in-out property <[Show]> shows;
    out property <bool> mode-compact: false;
    callback add-clicked();
    callback show-clicked(Show);
    callback search(string);
    callback search-cancel();

    in-out property <bool> search-mode: false;

    VerticalLayout {
        search-toolbar := ToolBar {
            height: search-mode ? 50px : 0px;
            background: Palette.primary;
            visible: search-mode;

            HorizontalBox {
                padding: 0px;
                spacing: 0px;
                width: parent.width;
                height: parent.height;
                alignment: stretch;
                property <bool> is-changed;

                search-input := LineEdit {
                    placeholder-text: "Enter the show name here";
                    border-width: 0px;

                    accepted => {
                        is-changed = true;
                        search(self.text);
                    }
                }

                cancel-button := ToolButton {
                    hint: "Cancel";
                    hint-direction-left: true;
                    icon: Images.cancel;
                    width: 50px;
                    height: 50px;
                    background-color: Palette.primary;

                    clicked => {
                        search-mode = false;
                        if (is-changed) {
                            is-changed = false;
                            search-input.text = "";
                            search-cancel();
                        }
                    }
                }
            }
        }

        ToolBar {
            height: search-mode ? 0px : 50px;
            background: Palette.primary;
            visible: !search-mode;

            HorizontalBox {
                padding: 0px;
                spacing: 0px;
                width: parent.width;
                height: parent.height;
                alignment: space-between;

                HorizontalLayout {
                    alignment: start;

                    mode-button := ToolButton {
                        hint: "Change view mode";
                        icon: mode-compact ? Images.list-compact : Images.list;
                        width: 50px;
                        height: 50px;
                        background-color: Palette.primary;
                        z: 10;

                        clicked => {
                            mode-compact = !mode-compact;
                        }
                    }

                    add-button := ToolButton {
                        hint: "Add show";
                        icon: Images.add;
                        width: 50px;
                        height: 50px;
                        background-color: Palette.primary;
                        z: 9;

                        clicked => {
                            add-clicked();
                        }
                    }
                }

                HorizontalLayout {
                    alignment: end;

                    search-button := ToolButton {
                        hint: "Search";
                        hint-direction-left: true;
                        icon: Images.search;
                        width: 50px;
                        height: 50px;
                        background-color: Palette.primary;

                        clicked => {
                            search-mode = true;
                            search-input.text-focus();
                        }
                    }
                }
            }
        }

        if !root.mode-compact : HorizontalLayout {
            property <float> scroll-coef: list.height / list.viewport-height;

            list := Flickable {
                VerticalBox {
                    padding: 0px;
                    spacing: 0px;

                    for s in shows : ListElement {
                        show: s;
                        title-color: s.new-episodes-available && s.status == Status.watching ?
                            Palette.light-blue : Palette.text;

                        Rectangle {
                            background: #101010;
                            height: 1px;
                            y: parent.height - 1px;
                        }

                        TouchArea {
                            clicked() => {
                                show-clicked(s);
                            }
                        }
                    }
                }
            }

            scrollbar := Rectangle {
                width: 8px;
                background: Palette.primary;

                scrollbar-indicator := Rectangle {
                    height: min(list.height, scroll-coef * list.height);
                    y: -list.viewport-y * scroll-coef;
                    background: Palette.border;
                }
            }
        }
        if root.mode-compact : HorizontalLayout {
            property <float> scroll-coef: list-compact.height / list-compact.viewport-height;

            list-compact := Flickable {
                VerticalBox {
                    padding: 0px;
                    spacing: 0px;

                    for s in shows : ListElementCompact {
                        show: s;
                        title-color: s.new-episodes-available && s.status == Status.watching ?
                            Palette.light-blue : Palette.text;

                        Rectangle {
                            background: #101010;
                            height: 1px;
                            y: parent.height - 1px;
                        }

                        TouchArea {
                            clicked() => {
                                show-clicked(s);
                            }
                        }
                    }
                }
            }

            scrollbar-compact := Rectangle {
                width: 8px;
                background: Palette.primary;

                scrollbar-indicator-compact := Rectangle {
                    height: min(list-compact.height, scroll-coef * list-compact.height);
                    y: -list-compact.viewport-y * scroll-coef;
                    background: Palette.border;
                }
            }
        }
    }
}
