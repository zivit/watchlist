import { ToolBar, ToolButton } from "ToolBar.slint";
import { Show, Filter, FilterStatus } from "Structs.slint";
import { AddShowWindow } from "AddShowWindow.slint";
import { ShowWindow } from "ShowWindow.slint";
import { ChangePictureDialog } from "ChangePictureDialog.slint";
import { Images, Palette } from "Global.slint";
import { Watchlist } from "Watchlist.slint";

export struct ImageDetails {
    source: image,
    path: string,
}

export component AppWindow inherits Window {
    min-width: 800px;
    min-height: 600px;
    preferred-width: 1000px;
    preferred-height: 800px;
    title: "Watchlist";

    callback add-show(Show);
    callback can-import-show-by-link(string) -> bool;
    callback cancel-show();
    callback check-new-episode-available(Show) -> bool;
    callback episode-changed(Show);
    callback favorite-changed(Show);
    callback show-filter([Show], Filter) -> [Show];
    callback display-dropped();
    callback get-local-image-path() -> string;
    callback get-weekday-now() -> int;
    callback get-weekday(string) -> int;
    callback import-clicked(string) -> Show;
    callback load-image(string) -> ImageDetails;
    callback open-link(string);
    callback parse-datetime(string) -> [int];
    callback remove-show(Show);
    callback score-changed(Show);
    callback search([Show], string) -> [Show];
    callback season-changed(Show);
    callback set-shows([Show]);
    callback status-changed(Show);

    property <ImageDetails> show-image;
    property <[Show]> shows;
    property <Filter> filter;

    set-shows(s) => {
        shows = s;
        watchlist.shows = shows;
    }

    function load-image-impl(name: string) -> image {
        show-image = root.load-image(name);
        if (show-image.source.width == 0) {
            return Images.show-picture;
        }
        else {
            add-window.link-to-picture = show-image.path;
            return show-image.source;
        }
    }

    watchlist := Watchlist {
        background: Palette.secondary;

        add-clicked => {
            self.visible = false;
            add-window.reset();
            add-window.visible = true;
        }

        show-clicked(show, index) => {
            self.visible = false;
            show-window.day-now = get-weekday-now();
            show-window.display-show(show, index);
            show-window.visible = true;
        }

        search(text) => {
            watchlist.shows = search(shows, text);
        }

        search-cancel => {
            // update-watchlist();
            watchlist.shows = shows;
        }

        display-watching => {
            filter.status = FilterStatus.watching;
            watchlist.shows = show-filter(shows, filter);
        }

        display-planned => {
            filter.status = FilterStatus.planned;
            watchlist.shows = show-filter(shows, filter);
        }

        display-completed => {
            filter.status = FilterStatus.completed;
            watchlist.shows = show-filter(shows, filter);
        }

        display-liked => {
            filter.status = FilterStatus.liked;
            watchlist.shows = show-filter(shows, filter);
        }

        display-dropped => {
            filter.status = FilterStatus.dropped;
            watchlist.shows = show-filter(shows, filter);
        }

        cancel-quick-filter => {
            filter.status = FilterStatus.all;
            watchlist.shows = show-filter(shows, filter);
        }
    }

    show-window := ShowWindow {
        background: Palette.secondary;
        visible: false;

        score-changed => {
            score-changed(show-window.show);
        }

        status-changed => {
            status-changed(show-window.show);
        }

        favorite-changed => {
            favorite-changed(show-window.show);
        }

        season-changed => {
            season-changed(show-window.show);
        }

        episode-changed => {
            episode-changed(show-window.show);
            self.show.new-episodes-available = check-new-episode-available(self.show);
            watchlist.shows[self.index] = self.show;
        }

        back(is-changed, show, index) => {
            self.visible = false;
            watchlist.search-mode = false;
            watchlist.visible = true;
            if (is-changed) {
                watchlist.shows[index] = show;
            }
        }

        edit(show) => {
            self.visible = false;
            add-window.set-show(show);
            add-window.visible = true;
        }

        remove(show) => {
            remove-show(show);
            self.visible = false;
            watchlist.visible = true;
            watchlist.shows = shows;
        }

        open-link(link) => {
            open-link(link);
        }
    }

    add-window := AddShowWindow {
        background: Palette.secondary;
        visible: false;

        add-show(show) => {
            root.add-show(show);
            self.visible = false;
            watchlist.visible = true;
            watchlist.shows = shows;
        }

        cancel-show => {
            root.cancel-show();
            self.visible = false;
            watchlist.visible = true;
        }

        change-picture => {
            change-picture-dialog.show();
        }

        link-changed(link) => {
            return can-import-show-by-link(link);
        }

        import-clicked(link) => {
            return import-clicked(link);
        }

        load-image(name) => {
            return load-image-impl(name);
        }

        get-weekday(datetime) => {
            return get-weekday(datetime);
        }

        parse-datetime(datetime) => {
            return parse-datetime(datetime);
        }
    }

    change-picture-dialog := ChangePictureDialog {
        width: root.width;
        height: root.height;

        load-image(name) => {
            add-window.show-image = load-image-impl(name);
        }

        get-local-path() => {
            return get-local-image-path();
        }
    }
}

